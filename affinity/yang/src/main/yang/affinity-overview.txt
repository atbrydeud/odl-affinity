Affinity endpoint: 
=================

This identifies an application endpoint, and may be one of the
following. This is a stationary location wthin the combined physical +
virtual network which does not move as VMs are migrated.

 (a) Reference to VM or PM object in the database. In a controller
 that tracks data center compute resources (such as Open Stack or
 vCenter) this represents a reference to the database object such as
 Uuid for that object. A controller such as Open Daylight does not
 track external compute resource objects and therefore will not
 support this type of affinity endpoint.

 (b) Node connector, which is a combination of switch + port in an ODL
 network.  This may represent either a physical network interface or a
 virtual network interface.

Affinity address domain: 
=======================

This represents a domain (i.e, set) of one or more addresses. An
affinity address may not have a corresponding endpoint on the network,
for example, for traffic from a set of external addresses (north-south
traffic in a data center), the source IP address domain is not
required to map exactly to endpoints or node connectors on the
network.

Affinity address specifies one or more of the following: 

 (a) VLAN + MAC address, or range of MAC addresses.

 (b) Network layer address, IP address, or range of addresses, or
 prefix/mask representing multiple sources. 

 (c) Transport layer address, which is the transport protocol type and
 port number.

Affinity Group: 
==============
Affinity group which is an enumeration of one or more items where each
item is an affinity endpoint or affinity address domain. An affintiy
group may also contain other affinity groups in addition to endpoints
and address domains.

Affinity Link:
============= 
Affinity link connects one group (from group) to another (to
group). It represents a set of flows that start from the source group
and end in the destination group.  An affinity link has attributes
(policies) attached to it that represent how these flows must be
handled. An affinity link also has directionality associated with
it. A bidirectional affinity link is equivalent to two unidirectional
affinity links, one in each direction.

Affinity attribute: 
==================
An affinity attribute is assigned to an affinity link. An attribute is
one of the following:
 
 (a) Path affinity. Path affinities may be one of the following types
 -- latency sensitive, bandwidth sensitive, or isolate.

 (a) Path affinity. Path affinities may be one of the following types -- 

     * Isolation. This is an attribute that specifies that the
       application flow must be assigned an isolated path on the
       network from flows from other affinity links. While flows
       within the same affinity link may share one or more network
       links of the path, flows from different affinity links will be
       allocated to non-overlapping paths.

    // Isolate flows according to certain constraints. 
    grouping isolate-path {
        leaf max-flows-per-link {
            type uint16;
        }
    }

    // Route through shortest path per l2/l3 semantics. 
    grouping shortest-path {
        leaf max-flows-per-link {
            type uint16;
        }
    }
   
    // oversubscription path
    grouping oversubscription-path {
        leaf max-link-oversubscription-percent {
            type uint16;
        }
    }

    * Shortest-path. This is an attribute that specifies that the
      application flow travels along the shortest path between source
      and destination.

     
    * Limit Oversubscription. This is an attribute that constrains the
      path between source and destination such that the maximum link
      oversubscription is limited to a certain fraction of link
      capacity. This is useful for applications that demand a certain
      bandwidth. (To be verified). 


    // Affinity attribute. 
    grouping affinity-attribute {
        leaf id {
            type string;
        }
        choice attribute-type {
            description "affinity attribute";
            case isolate-path {
                 container isolate-path {
                     uses isolate-path;
                 }
            }
            case shortest-path {
                    container shortest-path {
                        uses shortest-path;
                    }
            }
            case limit-oversubscription-path {
                    container limit-oversubscription-path {
                        uses limit-oversubscription-path;
                    }
            }
        }
    }

 
 (b) Access control affinity. This is an attribute that specifies that
 the application flow must either be permitted (PERMIT) or denied (DENY). 

 (c) Path redirect affinity. This affinity link must traverse specified
 chain of waypoint locations, each specified by an IP address or Mac address. 

 (d) Tap affinity. All traffic belonging to this affinity link must be
 mirrored to specified endpoint location. The endpoint location is
 carried in the affinity attribute configuration.

 (e) Priority forwarding. All traffic belonging to this affinity link
 must be assigned a priority level. Setting this priority level
 provides differential treatment for this traffic relative to other
 flows on the network. One of five levels of priority must be
 specified (very low=0, low, normal, high, very high=5). 

Strict vs. sensitive: 
=====================
Note that the attribute may be a goal (not strict) -- latency or
bandwidth sensitive, or an action (strict) -- forward to this port,
tunnel to this endpoint.

